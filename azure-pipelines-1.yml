# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml


trigger:
  branches:
    include:
    - master
    - dev


variables:
  # should deploy to prod 
  isMaster: $[eq(variables['Build.SourceBranch'], 'refs/heads/master')]
  isStaging: $[eq(variables['Build.SourceBranch'], 'refs/heads/dev')]

  # Azure Resource Manager connection created during pipeline creation
  azureServiceConnectionId: '2ec3dc46-8bc4-43cc-a5e3-ac98be6ca5f2'

  # Web app name
  webAppName: 'adlin'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'

  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)

  # Python version: 3.8
  pythonVersion: '3.8'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: BuildJob
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '$(pythonVersion)'
      displayName: 'Use Python $(pythonVersion)'

    - script: |
        python -m venv ENV
        source ENV/bin/activate
        python -m pip install --upgrade pip
        pip install setup
        pip install -r requirements.txt
      workingDirectory: $(projectRoot)
      displayName: "Install requirements"
    - task: ArchiveFiles@2
      displayName: 'Archive files'
      inputs:
        rootFolderOrFile: '$(projectRoot)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      displayName: 'Upload package'
      artifact: drop

- stage: DeployStage
  displayName: 'Deploy Web App to Stage'
  dependsOn: Build
  condition: and(succeeded(), eq(variables.isStaging, 'True'))
  jobs:
  - deployment: DeploymentJobStaging
    pool:
      vmImage: $(vmImageName)
    environment: 'staging'
    strategy:
      runOnce:
        deploy:
          steps:

          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
            displayName: 'Use Python version'

          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App : adlin'
            inputs:
              azureSubscription: $(azureServiceConnectionId)
              appName: $(webAppName)
              package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip
              appType: webAppLinux

- stage: DeployProd
  displayName: 'Deploy Web App To Prod'
  dependsOn: Build
  condition: and(succeeded(), eq(variables.isMaster, 'True'))
  jobs:
  - deployment: DeploymentJobProd
    pool:
      vmImage: $(vmImageName)
    environment: 'prod'
    strategy:
      runOnce:
        deploy:
          steps:

          - task: UsePythonVersion@0
            inputs:
              versionSpec: '$(pythonVersion)'
            displayName: 'Use Python version'

          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App : adlin'
            inputs:
              azureSubscription: $(azureServiceConnectionId)
              appName: $(webAppName)
              package: $(Pipeline.Workspace)/drop/$(Build.BuildId).zip
              appType: webAppLinux

- stage: SendLogsToTeams
  displayName: 'Send logs to Teams'
  dependsOn: 
    - DeployProd
    - DeployStage
  condition: always()
  jobs:
  - job: SendToTeamsJob
    steps:
    - task: PowerShell@2
      inputs:
        filePath: '$(projectRoot)/message-teams.ps1'
        arguments: >
          - teamsWebhookUrl 'https://inlinemarketevolutionoy.webhook.office.com/webhookb2/0da9231a-2d3c-4f8e-bda1-767017fbee8b@1e3ee4c0-94a9-45a4-9151-07e1858e6372/IncomingWebhook/471e30b85bff43fb97d37a5235b38799/4b3fb30e-1e8c-4832-be5d-df3bcd5271bc'
      displayName: 'Send logs to Teams'